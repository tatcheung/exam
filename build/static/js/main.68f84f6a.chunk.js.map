{"version":3,"sources":["Post.js","PostDetail.js","PostList.js","serviceWorker.js","index.js"],"names":["Post","props","state","post","this","first_section","sections","thumbnail","media","url","title","displaytime","time","console","log","className","onClick","src","alt","React","Component","PostDetail","map","s","imageUrl","key","ReactHtmlParser","description","PostList","selectedPost","posts","fetch","method","then","response","json","data","rows","setState","catch","error","alert","a","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sQA8CeA,G,iBAzCX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,GAFC,E,sEAKT,IAAD,OAGAC,EAAOC,KAAKH,MAAME,KAElBE,EAAgBF,EAAKG,SAAS,IAAM,GAEpCC,EAAYF,EAAcG,MAAM,GAAGC,IACnCC,EAAQL,EAAcK,MACtBC,EAAcR,EAAKS,KAIvB,OAFAC,QAAQC,IAAIT,GAGR,yBAAKU,UAAU,OAAOC,QAAS,WAEK,mBAAtB,EAAKf,MAAMe,SACjB,EAAKf,MAAMe,YAIf,yBAAKC,IAAKV,EAAWQ,UAAU,YAAYG,IAAI,YAC/C,6BAEI,4BAAKR,GAGJC,Q,GAlCFQ,IAAMC,Y,iBCqCVC,E,YAjCX,WAAYpB,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,GAFC,E,sEAQd,IAAII,EAAWF,KAAKH,MAAME,KAAKG,SAE/B,OACI,yBAAKS,UAAU,oBAGPT,EAASgB,KAAI,SAACC,GAEV,IAAIC,GAAYD,EAAEf,MAAM,IAAM,IAAIC,IAElC,OACI,yBAAKgB,IAAKF,EAAEb,MAAOK,UAAU,WACzB,yBAAKE,IAAKO,EAAUT,UAAU,WAAWG,IAAI,YAC7C,yBAAKH,UAAU,uBAAuBW,IAAgBH,EAAEI,uB,GAvB/DR,IAAMC,WCmFhBQ,E,YAhFX,WAAY3B,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACT2B,aAAe,CACXvB,SAAW,IAEfwB,MAAQ,IANE,E,iFAWE,IAAD,OAEfC,MACI,gBACA,CACIC,OAAS,QAIhBC,MAAK,SAACC,GACH,OAAOA,EAASC,UAGnBF,MAAK,SAACG,GAEH,IAAIN,EAAQM,EAAKA,KAAKC,KAEtB,EAAKC,SAAS,CACVR,MAAQA,OAIfS,OAAM,SAACC,GACJC,MAAMD,Q,+BAML,IAAD,OACJ,OACI,yBAAKzB,UAAU,iBACX,yBAAKA,UAAU,WAGX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,OAAf,4BAGA,yBAAKA,UAAU,aACVX,KAAKF,MAAM4B,MAAMR,KAAI,SAACoB,GACnB,OACI,kBAAC,EAAD,CAAMjB,IAAKiB,EAAEC,GAAIxC,KAAMuC,EAAG1B,QAAS,WAE/B,EAAKsB,SACD,CACIT,aAAea,YAU3C,yBAAK3B,UAAU,gBAEX,kBAAC,EAAD,CAAYZ,KAAMC,KAAKF,MAAM2B,sB,GAxE9BV,IAAMC,WCOTwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,SD6HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.68f84f6a.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nclass Post extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {};\n    }\n\n    render(){\n        \n        // get post\n        var post = this.props.post;\n        // get first section\n        var first_section = post.sections[0] || {};\n        // get thumbnail from first section\n        var thumbnail = first_section.media[0].url;\n        var title = first_section.title;\n        var displaytime = post.time;\n\n        console.log(first_section); // HINT: see what is first section at your console\n\n        return (\n            <div className=\"post\" onClick={() => {\n                // when post is being clicked\n                if(typeof this.props.onClick == \"function\") {\n                    this.props.onClick();\n                }\n            }}>\n                {/* --------- Post thumbnail --------- */}\n                <img src={thumbnail} className=\"thumbnail\" alt=\"Section\"/>\n                <div>\n                    {/* --------- Post Title? --------- */}\n                    <h1>{title}</h1>\n\n                    {/* --------- Post time? --------- */}\n                    {displaytime}\n\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Post;\n\n","import React from 'react';\nimport ReactHtmlParser from 'react-html-parser';\nimport './style.css';\n\n\nclass PostDetail extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {};\n    }\n\n    render(){\n\n        // setup an array called sections to contain our post content\n        var sections = this.props.post.sections;\n\n        return(\n            <div className=\"post-detail-view\">\n                {/* -------------- Display post section by section -------------- */}\n                {\n                    sections.map((s) => {\n                        // get the url of the first image from this section\n                        var imageUrl = (s.media[0] || {}).url;\n\n                        return (\n                            <div key={s.title} className=\"section\">\n                                <img src={imageUrl} className=\"imageUrl\" alt=\"Section\"/>\n                                <div className=\"section-description\">{ReactHtmlParser(s.description)}</div>\n                            </div>\n                        );\n                    })\n                }\n            </div>\n        )\n    }\n\n}\n\n\nexport default PostDetail;","import React from 'react';\nimport Post from './Post';\nimport PostDetail from './PostDetail';\nimport './style.css';\n\nclass PostList extends React.Component {\n\n    // setup\n    constructor(props){\n        super(props);\n        this.state = {\n            selectedPost : {\n                sections : []\n            },\n            posts : []\n        }\n    }\n\n\n    componentDidMount(){\n        // get posts\n        fetch(\n            \"/api/articles\",\n            {\n                method : \"GET\"\n            }\n        )\n        // get response's data\n        .then((response) => {\n            return response.json();\n        })\n        // assign data to state\n        .then((data) => {\n            // get posts\n            var posts = data.data.rows;\n            // update state\n            this.setState({\n                posts : posts\n            });\n        })\n        // error?\n        .catch((error) => {\n            alert(error);\n        });\n    }\n\n\n    // rendering\n    render(){\n        return (\n            <div className=\"app-container\">\n                <div className=\"wrapper\">\n\n                    {/* --------- Post List ---------- */}\n                    <div className=\"left-column\">\n                        <div className=\"nav\">\n                            文章列表\n                        </div>\n                        <div className=\"post-list\">\n                            {this.state.posts.map((a) => {\n                                return (\n                                    <Post key={a.id} post={a} onClick={() => {\n                                        // When post onClick, we set selectedPost as a\n                                        this.setState(\n                                            {\n                                                selectedPost : a\n                                            })\n                                    }}/> \n                                );\n                            })}\n                        </div>\n                    </div>\n                    {/* --------- /Post List ---------- */}\n\n                    {/* --------- Post Reading View ---------- */}\n                    <div className=\"right-column\">\n                        {/*  Post Detail is a component displaying the selected Post */}\n                        <PostDetail post={this.state.selectedPost} />\n                    </div>\n                    {/* --------- /Post Reading View ---------- */}\n\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default PostList;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PostList from './PostList';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<PostList />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}